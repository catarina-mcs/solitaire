{"mappings":"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","sources":["src/scripts/index.js"],"sourcesContent":["const gameArea = document.querySelector('.game-area');\nconst foundationsDisplay = Array.from(document.getElementsByClassName('foundations-pile'));\nconst wasteDisplay = document.querySelector('.waste-pile');\nconst stockDisplay = document.querySelector('.stock-pile');\nconst tableauDisplay = Array.from(document.getElementsByClassName('tableau-pile'));\nconst placeholders = Array.from(document.getElementsByClassName('placeholder'));\nconst hiddenCards = document.getElementsByClassName('hidden');\nconst btnUndo = document.getElementById('btn-undo');\nconst btnPauseStart = document.getElementById('btn-pause-start');\nconst btnRestart = document.getElementById('btn-restart');\nconst btnNewGame = document.getElementById('btn-new-game');\nconst minutesDisplay = document.getElementById('minutes');\nconst secondsDisplay = document.getElementById('seconds');\nconst scoreDisplay = document.getElementById('score');\nconst movesDisplay = document.getElementById('moves');\nconst winningMessage = document.querySelector('.winning-message');\nlet deck = [];\nlet foundations, waste, stock, tableau;\nlet isLastTableauPileCard = true;\nlet longestPileLength = 0;\nlet score, moves, seconds, minutes, clock, thisGameDeck, stopLoop, stockHasOneRound;\nlet selectedCard, selectedCardDisplay, cardIndex, originArray, destinationArray, originPileDisplay, destinationPileDisplay, amountMovedCards, lastMove, lastMovedCard, prevCardHidden;\n\n\nbtnUndo.addEventListener('click', undoLastMove);\nbtnPauseStart.addEventListener('click', pauseStartGame);\nbtnRestart.addEventListener('click', restartGame);\nbtnNewGame.addEventListener('click', startGame);\n\nfunction reset() {\n    foundations = [[],[],[],[]];\n    waste = [];\n    stock = [];\n    tableau = [];\n    minutes = 0;\n    seconds = 0;\n    score = 0;\n    moves = 0;\n    stockHasOneRound = false;\n    minutesDisplay.textContent = '00';\n    secondsDisplay.textContent = '00';\n    scoreDisplay.textContent = '0';\n    movesDisplay.textContent = '0';\n    foundationsDisplay.forEach(pile => pile.style.cursor = 'default');\n    tableauDisplay.forEach(pile => pile.style.cursor = 'default');\n    gameArea.style.marginBottom = '42px';\n    winningMessage.style.display = 'none';\n}\n\nfunction startGame() {\n    reset();\n    clearInterval(clock);\n    createCards();\n    shuffleCards();\n    distributeCards();\n    displayCards();\n}\nstartGame();\n\nfunction restartGame() {\n    reset();\n    clearInterval(clock);\n    distributeCards();\n    displayCards();\n}\n\n\nfunction createCards() {\n    const suits = ['hearts', 'diamonds', 'spades', 'clubs'];\n\n    suits.forEach(suit => {\n        for (let i = 0; i < 13; i++) {\n            deck.push({\n                suit: suit,\n                value: i+1,\n                color: (suit === 'hearts' || suit === 'diamonds') ? 'red' : 'black',\n                imageSrc: `./images/deck/${suit}-${i+1}.png`\n            });\n        }\n    });\n}\n\n\nfunction shuffleCards() {\n    deck.forEach((_, i) => {\n        const randomNum = Math.floor(Math.random() * deck.length);\n        let temp;\n        \n        temp = deck[randomNum];\n        deck[randomNum] = deck[i];\n        deck[i] = temp;\n    });\n\n    thisGameDeck = deck.map(card => card);\n}\n\n\nfunction distributeCards() {\n    deck = thisGameDeck.map(card => card);\n\n    for (let i = 0; i < 7; i++) {\n        tableau.push(deck.splice(0, i+1));\n    }\n        \n    stock = (deck.splice(0, deck.length));\n    stock.forEach(card => {\n        card.position = 'stock';\n    });\n\n}\n\n\nfunction displayCards() {\n    tableau.forEach((pile, i) => {\n        let tableauPileHtml = '';\n        pile.forEach((card,j) => {\n            tableauPileHtml += (j === pile.length - 1) ?\n                `<img src=\"${card.imageSrc}\" class=\"card\"/>` :\n                '<img src=\"./images/card-back.png\" class=\"card hidden\"/>';\n        });\n        tableauDisplay[i].innerHTML = tableauPileHtml;\n        alignTableauCards(tableauDisplay[i]);\n        tableauDisplay[i].addEventListener('click', moveCard);\n    });\n\n    stockDisplay.innerHTML = '<img src=\"./images/card-back.png\" class=\"card\"/>';\n    stockDisplay.addEventListener('click', turnStockCard);\n\n    wasteDisplay.innerHTML = '';\n\n    foundationsDisplay.forEach(pile => {\n        pile.innerHTML = '';\n        pile.addEventListener('click', moveCard);\n    });\n}\n\n\nfunction alignTableauCards(tableauPile) {\n    const tableauPileCards = Array.from(tableauPile.children);\n    let zIndex = 1;\n    let top = 0;\n    tableauPileCards.forEach(card => {\n        card.style.zIndex = zIndex;\n        card.style.top = `${top}px`;\n        zIndex++;\n        top += 30;\n    });\n\n    if (tableauPileCards.length > longestPileLength && tableauPileCards.length > 5) {\n        longestPileLength = tableauPileCards.length;\n        gameArea.style.marginBottom = `${(30 * (longestPileLength - 6)) + 150 + 42}px`; \n    }\n}\n\n\nfunction updateCardsDisplay() {\n    if (!isLastTableauPileCard) {\n        for (let i = 0; i < amountMovedCards; i++) {\n            destinationPileDisplay.appendChild(originPileDisplay.children[cardIndex]);\n        }\n    } else destinationPileDisplay.appendChild(selectedCardDisplay);\n\n    if (destinationPileDisplay.classList.contains('tableau-pile')) {\n        alignTableauCards(destinationPileDisplay);\n    } else {\n        selectedCardDisplay.style.zIndex = destinationArray.length;\n        selectedCardDisplay.style.top = '0px';\n    }\n\n    if (originPileDisplay.children[cardIndex - 1] && originPileDisplay.children[cardIndex - 1].classList.contains('hidden')) {\n        originPileDisplay.children[cardIndex - 1].classList.remove('hidden');\n        originPileDisplay.children[cardIndex - 1].setAttribute('src', originArray[cardIndex - 1].imageSrc);\n        prevCardHidden = true;\n    } else prevCardHidden = false;\n}\n\n\nfunction updateArrays() {\n    if (destinationPileDisplay.classList.contains('foundations-pile')) {\n        amountMovedCards = originArray.length - cardIndex;\n        const movedCard = originArray.pop();\n        destinationArray.push(movedCard);\n    } else if (destinationPileDisplay.classList.contains('tableau-pile')) {\n        amountMovedCards = originArray.length - cardIndex;\n        const movedCards = originArray.splice(cardIndex, amountMovedCards);\n        destinationArray.push(...movedCards);\n    }\n    updateCardsDisplay();\n}\n\n\nfunction turnStockCard() {\n    btnUndo.addEventListener('click', undoLastMove);\n    btnUndo.classList.remove('inactive');\n    lastMove = 'turn stock card';\n    moves ++;\n    movesDisplay.textContent = moves;\n    moves === 1 && startClock();\n    \n    if (selectedCardDisplay) {\n        selectedCardDisplay.classList.remove('card-active');\n        selectedCardDisplay = null;\n    }\n    \n    wasteDisplay.addEventListener('click', moveCard);\n    if (stock.length > 0) {\n        const turnedCard = stock.pop();\n        waste.push(turnedCard);\n        const cardImg = document.createElement('img');\n        cardImg.setAttribute('src', turnedCard.imageSrc);\n        cardImg.classList.add('card');\n        cardImg.style.zIndex = waste.length;\n        wasteDisplay.appendChild(cardImg);\n        if (stock.length === 0 && waste.length !== 0) {\n            (stockDisplay.innerHTML = '↻');\n            stockHasOneRound = true;\n        }\n        (stock.length === 0 && waste.length === 0) && (stockDisplay.innerHTML = '');\n    } else if (stock.length === 0) {\n        waste.forEach(card => stock.unshift(card));\n        waste = [];\n        (stock.length > 0) && (stockDisplay.innerHTML = '<img src=\"./images/card-back.png\" class=\"card\"/>');\n        wasteDisplay.innerHTML = '';\n        wasteDisplay.removeEventListener('click', moveCard);\n    }\n}\n\n\nfunction moveCard(e) {\n    if (!selectedCardDisplay) {\n        if (e.target.classList.contains('card') && !e.target.classList.contains('hidden')) {\n            selectedCardDisplay = e.target;\n            selectedCardDisplay.classList.add('card-active');\n            originPileDisplay = e.target.parentNode;\n            findSelectedCard();\n            foundationsDisplay.forEach(pile => pile.style.cursor = 'pointer');\n            tableauDisplay.forEach(pile => pile.style.cursor = 'pointer');\n        }\n        return;\n    }\n\n    if (selectedCardDisplay) {\n        \n        if (e.target === selectedCardDisplay) {\n            selectedCardDisplay.classList.remove('card-active');\n            selectedCardDisplay = null;\n            foundationsDisplay.forEach(pile => pile.style.cursor = 'default');\n            tableauDisplay.forEach(pile => pile.style.cursor = 'default');\n            return;\n        }\n        \n        destinationPileDisplay = e.target.classList.contains('card') ? e.target.parentNode : e.target;\n        findDestinationArray();\n        \n        if (isMoveValid()) {\n            updateArrays();\n            updateScore('make move');\n            moves ++;\n            movesDisplay.textContent = moves;\n            moves === 1 && startClock();\n            foundationsDisplay.forEach(pile => pile.style.cursor = 'default');\n            tableauDisplay.forEach(pile => pile.style.cursor = 'default');\n            btnUndo.addEventListener('click', undoLastMove);\n            btnUndo.classList.remove('inactive');\n            lastMove = 'move card';\n            lastMovedCard = selectedCardDisplay;\n            selectedCardDisplay.classList.remove('card-active');\n            selectedCardDisplay = null;\n            gameIsWon();\n        } else if (e.target.classList.contains('card') && !e.target.classList.contains('hidden')) {\n            selectedCardDisplay.classList.remove('card-active');\n            selectedCardDisplay = e.target;\n            selectedCardDisplay.classList.add('card-active');\n            originPileDisplay = e.target.parentNode;\n            findSelectedCard();\n        }\n    }\n}\n\n\nfunction findSelectedCard() {\n    const pileIndex = placeholders.findIndex(placeholder => placeholder === originPileDisplay);\n\n    if (pileIndex <= 3) {\n        originArray = foundations[pileIndex];\n        cardIndex = originArray.length - 1;\n    } else if (pileIndex === 4) {\n        originArray = waste;\n        cardIndex = originArray.length - 1;\n    } else if (pileIndex >= 6) {\n        originArray = tableau[pileIndex - 6];\n        cardIndex = Array.from(placeholders[pileIndex].children).findIndex(card => card === selectedCardDisplay);\n    }\n    \n    selectedCard = originArray[cardIndex];\n}\n\n\nfunction findDestinationArray() {\n    const pileIndex = placeholders.findIndex(placeholder => placeholder === destinationPileDisplay);\n\n    if (pileIndex <= 3) destinationArray = foundations[pileIndex];\n    else if (pileIndex === 4) destinationArray = waste;\n    else if (pileIndex >= 6) destinationArray = tableau[pileIndex - 6];\n}\n\n\nfunction isMoveValid() {\n    const originLastCardIndex = originArray.length - 1;\n    const destLastCard = destinationArray[destinationArray.length - 1];\n\n    if (\n        originPileDisplay.classList.contains('tableau-pile') && \n        selectedCardDisplay !== originPileDisplay.children[originLastCardIndex]\n    ) isLastTableauPileCard = false;\n    else isLastTableauPileCard = true;\n\n    if (destinationPileDisplay.classList.contains('tableau-pile')) {\n        if (destinationArray.length === 0 && selectedCard.value === 13) return true;\n        else if (destLastCard && selectedCard.color !== destLastCard.color && selectedCard.value === destLastCard.value - 1) return true;\n        else return false;\n    } else if (destinationPileDisplay.classList.contains('foundations-pile')) {\n        if (!isLastTableauPileCard) return false;\n        else if (destinationArray.length === 0 && selectedCard.value === 1) return true;\n        else if (destLastCard && selectedCard.suit === destLastCard.suit && selectedCard.value === destLastCard.value + 1) return true;\n        else return false;\n    }\n}\n\n\nfunction undoLastMove() {\n    if (lastMove === 'turn stock card') {\n        if (waste.length === 0 & stockHasOneRound) {\n            stock.forEach(card => waste.unshift(card));\n            stock = [];\n            const lastWasteCard = waste[waste.length - 1];\n            wasteDisplay.innerHTML = `<img src=\"${lastWasteCard.imageSrc}\" class=\"card\"/>`;\n            stockDisplay.innerHTML = '↻';\n        } else if (stock.length === 1 && stockHasOneRound) {\n            wasteDisplay.innerHTML = '';\n            stockDisplay.innerHTML = '<img src=\"./images/card-back.png\" class=\"card\"/>';\n        } else if (waste.length > 0) {\n            stock.push(waste.pop());\n            wasteDisplay.removeChild(wasteDisplay.children[wasteDisplay.children.length - 1]);\n            if (stock.length === 1) stockDisplay.innerHTML = '<img src=\"./images/card-back.png\" class=\"card\"/>';\n        }\n    } else if (lastMove === 'move card') {\n        if (originPileDisplay.classList.contains('foundations-pile') || originPileDisplay.classList.contains('waste-pile')) {\n            originArray.push(destinationArray.pop());\n            originPileDisplay.appendChild(lastMovedCard);\n            lastMovedCard.style.zIndex = originArray.length;\n            lastMovedCard.style.top = '0px';\n        } else if (originPileDisplay.classList.contains('tableau-pile')) {\n            const movedCardIndex = destinationArray.length - amountMovedCards;\n            originArray.push(...destinationArray.splice(movedCardIndex, amountMovedCards));\n            for (let i = 0; i < amountMovedCards; i++) {\n                originPileDisplay.appendChild(destinationPileDisplay.children[movedCardIndex]);\n            }\n            if (prevCardHidden) {\n                originPileDisplay.children[cardIndex - 1].classList.add('hidden');\n                originPileDisplay.children[cardIndex - 1].setAttribute('src', './images/card-back.png');\n            }\n            alignTableauCards(originPileDisplay);\n        }\n    }\n    updateScore('undo move');\n    if (moves > 0) {\n        btnUndo.removeEventListener('click', undoLastMove);\n        btnUndo.classList.add('inactive');\n    }\n    foundationsDisplay.forEach(pile => pile.style.cursor = 'default');\n    tableauDisplay.forEach(pile => pile.style.cursor = 'default');\n}\n\n\nfunction gameIsWon() {\n    if (foundations.every(pile => pile.length === 13)) {\n        showWinningMessage();\n        clearInterval(clock);\n    } else if (hiddenCards.length === 0 && stock.length === 0 && waste.length === 0) automateMoves();\n}\n\n\nfunction automateMoves() {\n    let intervalId = setInterval(() => {\n        for (let i = 0 ; i < tableau.length; i++) {\n            stopLoop = false;\n            for (let j = 0; j < foundations.length; j++) {\n                const lastTCardIndex = tableau[i].length - 1;\n                const lastFCardIndex = foundations[j] ? foundations[j].length - 1 : 0;\n\n                if (tableau[i].length > 0 && tableau[i][lastTCardIndex].value === 1 && foundations[j].length === 0) {\n                    const cardToMove = tableauDisplay[i].children[lastTCardIndex];\n                    foundationsDisplay[j].appendChild(cardToMove);\n                    cardToMove.style.top = '0px';\n                    cardToMove.style.zIndex = foundationsDisplay[j].children.length;\n                    foundations[j].push(tableau[i].pop());\n                    stopLoop = true;\n                    score += 10;\n                    moves++;\n                    scoreDisplay.textContent = score;\n                    movesDisplay.textContent = moves;\n                    break;\n                } else if (\n                    tableau[i].length > 0 &&\n                    (tableau[i][lastTCardIndex].suit === foundations[j][lastFCardIndex].suit &&\n                    tableau[i][lastTCardIndex].value === foundations[j][lastFCardIndex].value + 1)\n                ) {\n                    const cardToMove = tableauDisplay[i].children[lastTCardIndex];\n                    foundationsDisplay[j].appendChild(cardToMove);\n                    cardToMove.style.top = '0px';\n                    cardToMove.style.zIndex = foundationsDisplay[j].children.length;\n                    foundations[j].push(tableau[i].pop());\n                    stopLoop = true;\n                    score += 10;\n                    moves++;\n                    scoreDisplay.textContent = score;\n                    movesDisplay.textContent = moves;\n                    break;\n                }\n            }\n            if (stopLoop) break;\n        }\n        if (foundations.every(pile => pile.length === 13)) {\n            clearInterval(intervalId);\n            clearInterval(clock);\n            showWinningMessage();\n        }\n    }, 100);\n}\n\n\nfunction updateScore(action) {\n    if (action === 'make move') {\n        if (prevCardHidden) score += 5;\n        if (originPileDisplay.classList.contains('waste-pile') && destinationPileDisplay.classList.contains('tableau-pile')) score += 5;\n        if (originPileDisplay.classList.contains('foundations-pile') && destinationPileDisplay.classList.contains('tableau-pile')) score -= 15;\n        if (\n            (originPileDisplay.classList.contains('waste-pile') || originPileDisplay.classList.contains('tableau-pile')) &&\n            destinationPileDisplay.classList.contains('foundations-pile')\n        ) score += 10;\n    } else if (action === 'undo move' && lastMove === 'move card') {\n        if (prevCardHidden) score -= 5;\n        if (originPileDisplay.classList.contains('waste-pile') && destinationPileDisplay.classList.contains('tableau-pile')) score -= 5;\n        if (originPileDisplay.classList.contains('foundations-pile') && destinationPileDisplay.classList.contains('tableau-pile')) score += 15;\n        if (\n            (originPileDisplay.classList.contains('waste-pile') || originPileDisplay.classList.contains('tableau-pile')) &&\n            destinationPileDisplay.classList.contains('foundations-pile')\n        ) score -= 10;\n    }\n\n    scoreDisplay.textContent = score;\n}\n\n\nfunction pauseStartGame() {\n    if (btnPauseStart.classList.contains('pause') && moves > 0) {\n        clearInterval(clock);\n        btnPauseStart.classList.remove('pause');\n        btnPauseStart.classList.add('play');\n        btnPauseStart.setAttribute('src', './images/play-btn.svg');\n        foundationsDisplay.forEach(pile => pile.removeEventListener('click', moveCard));\n        tableauDisplay.forEach(pile => pile.removeEventListener('click', moveCard));\n        wasteDisplay.removeEventListener('click', moveCard);\n        stockDisplay.removeEventListener('click', turnStockCard);\n    } else if (btnPauseStart.classList.contains('play')) {\n        clock = setInterval(() => {\n            seconds++;\n            if (seconds === 60) {\n                minutes ++;\n                seconds = 0;\n            }\n            minutesDisplay.textContent = minutes >= 10 ? minutes : `0${minutes}`;\n            secondsDisplay.textContent = seconds >= 10 ? seconds : `0${seconds}`;\n        }, 1000);\n        btnPauseStart.classList.remove('play');\n        btnPauseStart.classList.add('pause');\n        btnPauseStart.setAttribute('src', './images/pause-btn.svg');\n        foundationsDisplay.forEach(pile => pile.addEventListener('click', moveCard));\n        tableauDisplay.forEach(pile => pile.addEventListener('click', moveCard));\n        waste.length > 0 && wasteDisplay.addEventListener('click', moveCard);\n        stockDisplay.addEventListener('click', turnStockCard);\n    }\n}\n\n\nfunction startClock() {\n    clock = setInterval(() => {\n        seconds++;\n        if (seconds === 60) {\n            minutes ++;\n            seconds = 0;\n        }\n        minutesDisplay.textContent = minutes >= 10 ? minutes : `0${minutes}`;\n        secondsDisplay.textContent = seconds >= 10 ? seconds : `0${seconds}`;\n    }, 1000);\n}\n\n\nfunction showWinningMessage() {\n    gameArea.style.marginBottom = '42px';\n    winningMessage.style.display = 'block';\n    winningMessage.innerHTML = `\n        <h3 class=\"congrats\"> Congratulations, you won! </h3>\n        <div class=\"stats\"> \n            <span>${minutesDisplay.textContent}:${secondsDisplay.textContent}</span>\n            <span>|</span>\n            <span>${score} points</span>\n            <span>|</span>\n            <span>${moves} moves</span>\n        </div>\n        <button class=\"btn btn-popup\" id=\"btn-play-again\">Play Again</button>\n    `;\n    document.getElementById('btn-play-again').addEventListener('click', startGame);\n}"],"names":["gameArea","document","querySelector","foundationsDisplay","Array","from","getElementsByClassName","wasteDisplay","stockDisplay","tableauDisplay","placeholders","hiddenCards","btnUndo","getElementById","btnPauseStart","btnRestart","btnNewGame","minutesDisplay","secondsDisplay","scoreDisplay","movesDisplay","winningMessage","foundations","waste","stock","tableau","score","moves","seconds","minutes","clock","thisGameDeck","stopLoop","stockHasOneRound","selectedCard","selectedCardDisplay","cardIndex","originArray","destinationArray","originPileDisplay","destinationPileDisplay","amountMovedCards","lastMove","lastMovedCard","prevCardHidden","deck","isLastTableauPileCard","longestPileLength","reset","textContent","forEach","pile","style","cursor","marginBottom","display","startGame","clearInterval","createCards","shuffleCards","distributeCards","displayCards","restartGame","suit","i","push","value","color","imageSrc","_","randomNum","Math","floor","random","length","temp","map","card","splice","position","tableauPileHtml","j","innerHTML","alignTableauCards","addEventListener","moveCard","turnStockCard","tableauPile","tableauPileCards","children","zIndex","top","updateCardsDisplay","appendChild","classList","contains","remove","setAttribute","updateArrays","movedCard","pop","movedCards","undoLastMove","startClock","turnedCard","cardImg","createElement","add","unshift","removeEventListener","e","target","parentNode","findDestinationArray","isMoveValid","updateScore","gameIsWon","findSelectedCard","pileIndex","findIndex","placeholder","originLastCardIndex","destLastCard","lastWasteCard","removeChild","movedCardIndex","every","showWinningMessage","automateMoves","intervalId","setInterval","lastTCardIndex","lastFCardIndex","cardToMove","action","pauseStartGame"],"version":3,"file":"index.27bf7c9b.js.map"}