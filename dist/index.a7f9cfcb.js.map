{"mappings":"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","sources":["src/scripts/index.js"],"sourcesContent":["const gameArea = document.querySelector('.game-area');\nconst foundationsDisplay = Array.from(document.getElementsByClassName('foundations-pile'));\nconst wasteDisplay = document.querySelector('.waste-pile');\nconst stockDisplay = document.querySelector('.stock-pile');\nconst tableauDisplay = Array.from(document.getElementsByClassName('tableau-pile'));\nconst placeholders = Array.from(document.getElementsByClassName('placeholder'));\nconst hiddenCards = document.getElementsByClassName('hidden');\nconst btnUndo = document.getElementById('btn-undo');\nconst btnPauseStart = document.getElementById('btn-pause-start');\nconst btnRestart = document.getElementById('btn-restart');\nconst btnNewGame = document.getElementById('btn-new-game');\nconst minutesDisplay = document.getElementById('minutes');\nconst secondsDisplay = document.getElementById('seconds');\nconst scoreDisplay = document.getElementById('score');\nconst movesDisplay = document.getElementById('moves');\nconst winningMessage = document.querySelector('.winning-message');\nlet deck = [];\nlet foundations, waste, stock, tableau;\nlet isLastTableauPileCard = true;\nlet longestPileLength = 0;\nlet score, moves, seconds, minutes, clock, thisGameDeck, stopLoop, stockHasOneRound;\nlet selectedCard, selectedCardDisplay, cardIndex, undoCardIndex, originArray, undoOriginArray, destinationArray, originPileDisplay, undoOriginPileDisplay, destinationPileDisplay, amountMovedCards, lastMove, lastMovedCard, prevCardHidden;\n\n\nbtnPauseStart.addEventListener('click', pauseStartGame);\nbtnRestart.addEventListener('click', restartGame);\nbtnNewGame.addEventListener('click', startGame);\n\nfunction reset() {\n    foundations = [[],[],[],[]];\n    waste = [];\n    stock = [];\n    tableau = [];\n    minutes = 0;\n    seconds = 0;\n    score = 0;\n    moves = 0;\n    stockHasOneRound = false;\n    minutesDisplay.textContent = '00';\n    secondsDisplay.textContent = '00';\n    scoreDisplay.textContent = '0';\n    movesDisplay.textContent = '0';\n    foundationsDisplay.forEach(pile => pile.style.cursor = 'default');\n    tableauDisplay.forEach(pile => pile.style.cursor = 'default');\n    gameArea.style.marginBottom = '42px';\n    winningMessage.style.display = 'none';\n    btnUndo.classList.add('inactive');\n}\n\nfunction startGame() {\n    reset();\n    clearInterval(clock);\n    createCards();\n    shuffleCards();\n    distributeCards();\n    displayCards();\n}\nstartGame();\n\nfunction restartGame() {\n    reset();\n    clearInterval(clock);\n    distributeCards();\n    displayCards();\n}\n\n\nfunction createCards() {\n    const suits = ['hearts', 'diamonds', 'spades', 'clubs'];\n\n    suits.forEach(suit => {\n        for (let i = 0; i < 13; i++) {\n            deck.push({\n                suit: suit,\n                value: i+1,\n                color: (suit === 'hearts' || suit === 'diamonds') ? 'red' : 'black',\n                imageSrc: `./images/deck/${suit}-${i+1}.png`\n            });\n        }\n    });\n}\n\n\nfunction shuffleCards() {\n    deck.forEach((_, i) => {\n        const randomNum = Math.floor(Math.random() * deck.length);\n        let temp;\n        \n        temp = deck[randomNum];\n        deck[randomNum] = deck[i];\n        deck[i] = temp;\n    });\n\n    thisGameDeck = deck.map(card => card);\n}\n\n\nfunction distributeCards() {\n    deck = thisGameDeck.map(card => card);\n\n    for (let i = 0; i < 7; i++) {\n        tableau.push(deck.splice(0, i+1));\n    }\n        \n    stock = (deck.splice(0, deck.length));\n    stock.forEach(card => {\n        card.position = 'stock';\n    });\n\n}\n\n\nfunction displayCards() {\n    tableau.forEach((pile, i) => {\n        let tableauPileHtml = '';\n        pile.forEach((card,j) => {\n            tableauPileHtml += (j === pile.length - 1) ?\n                `<img src=\"${card.imageSrc}\" class=\"card\"/>` :\n                '<img src=\"./images/card-back.png\" class=\"card hidden\"/>';\n        });\n        tableauDisplay[i].innerHTML = tableauPileHtml;\n        alignTableauCards(tableauDisplay[i]);\n        tableauDisplay[i].addEventListener('click', moveCard);\n    });\n\n    stockDisplay.innerHTML = '<img src=\"./images/card-back.png\" class=\"card\"/>';\n    stockDisplay.addEventListener('click', turnStockCard);\n\n    wasteDisplay.innerHTML = '';\n\n    foundationsDisplay.forEach(pile => {\n        pile.innerHTML = '';\n        pile.addEventListener('click', moveCard);\n    });\n}\n\n\nfunction alignTableauCards(tableauPile) {\n    const tableauPileCards = Array.from(tableauPile.children);\n    let zIndex = 1;\n    let top = 0;\n    tableauPileCards.forEach(card => {\n        card.style.zIndex = zIndex;\n        card.style.top = `${top}px`;\n        zIndex++;\n        if (!card.classList.contains('hidden')) top += 30\n        else top += 20;\n    });\n\n    if (tableauPileCards.length > longestPileLength && tableauPileCards.length > 5) {\n        longestPileLength = tableauPileCards.length;\n        gameArea.style.marginBottom = `${(30 * (longestPileLength - 6)) + 150 + 42}px`; \n    }\n}\n\n\nfunction updateCardsDisplay() {\n    if (!isLastTableauPileCard) {\n        for (let i = 0; i < amountMovedCards; i++) {\n            destinationPileDisplay.appendChild(originPileDisplay.children[cardIndex]);\n        }\n    } else destinationPileDisplay.appendChild(selectedCardDisplay);\n\n    if (destinationPileDisplay.classList.contains('tableau-pile')) {\n        alignTableauCards(destinationPileDisplay);\n    } else {\n        selectedCardDisplay.style.zIndex = destinationArray.length;\n        selectedCardDisplay.style.top = '0px';\n    }\n\n    if (originPileDisplay.children[cardIndex - 1] && originPileDisplay.children[cardIndex - 1].classList.contains('hidden')) {\n        originPileDisplay.children[cardIndex - 1].classList.remove('hidden');\n        originPileDisplay.children[cardIndex - 1].setAttribute('src', originArray[cardIndex - 1].imageSrc);\n        prevCardHidden = true;\n    } else prevCardHidden = false;\n}\n\n\nfunction updateArrays() {\n    if (destinationPileDisplay.classList.contains('foundations-pile')) {\n        amountMovedCards = originArray.length - cardIndex;\n        const movedCard = originArray.pop();\n        destinationArray.push(movedCard);\n    } else if (destinationPileDisplay.classList.contains('tableau-pile')) {\n        amountMovedCards = originArray.length - cardIndex;\n        const movedCards = originArray.splice(cardIndex, amountMovedCards);\n        destinationArray.push(...movedCards);\n    }\n    updateCardsDisplay();\n}\n\n\nfunction turnStockCard() {\n    btnUndo.addEventListener('click', undoLastMove);\n    btnUndo.classList.remove('inactive');\n    lastMove = 'turn stock card';\n    moves ++;\n    movesDisplay.textContent = moves;\n    moves === 1 && startClock();\n    \n    if (selectedCardDisplay) {\n        selectedCardDisplay.classList.remove('card-active');\n        selectedCardDisplay = null;\n    }\n    \n    wasteDisplay.addEventListener('click', moveCard);\n    if (stock.length > 0) {\n        const turnedCard = stock.pop();\n        waste.push(turnedCard);\n        const cardImg = document.createElement('img');\n        cardImg.setAttribute('src', turnedCard.imageSrc);\n        cardImg.classList.add('card');\n        cardImg.style.zIndex = waste.length;\n        wasteDisplay.appendChild(cardImg);\n        if (stock.length === 0 && waste.length !== 0) {\n            (stockDisplay.innerHTML = '↻');\n            stockHasOneRound = true;\n        }\n        (stock.length === 0 && waste.length === 0) && (stockDisplay.innerHTML = '');\n    } else if (stock.length === 0) {\n        waste.forEach(card => stock.unshift(card));\n        waste = [];\n        if (stock.length > 0) {\n            stockDisplay.innerHTML = '<img src=\"./images/card-back.png\" class=\"card\"/>';\n            stockHasOneRound = false;\n        } \n        wasteDisplay.innerHTML = '';\n        wasteDisplay.removeEventListener('click', moveCard);\n    }\n}\n\n\nfunction moveCard(e) {\n    if (!selectedCardDisplay) {\n        if (e.target.classList.contains('card') && !e.target.classList.contains('hidden')) {\n            selectedCardDisplay = e.target;\n            selectedCardDisplay.classList.add('card-active');\n            originPileDisplay = e.target.parentNode;\n            findSelectedCard();\n            foundationsDisplay.forEach(pile => pile.style.cursor = 'pointer');\n            tableauDisplay.forEach(pile => pile.style.cursor = 'pointer');\n        }\n        return;\n    }\n\n    if (selectedCardDisplay) {\n        \n        if (e.target === selectedCardDisplay) {\n            selectedCardDisplay.classList.remove('card-active');\n            selectedCardDisplay = null;\n            foundationsDisplay.forEach(pile => pile.style.cursor = 'default');\n            tableauDisplay.forEach(pile => pile.style.cursor = 'default');\n            return;\n        }\n        \n        destinationPileDisplay = e.target.classList.contains('card') ? e.target.parentNode : e.target;\n        findDestinationArray();\n        \n        if (isMoveValid()) {\n            updateArrays();\n            updateScore('make move');\n            moves ++;\n            movesDisplay.textContent = moves;\n            moves === 1 && startClock();\n            foundationsDisplay.forEach(pile => pile.style.cursor = 'default');\n            tableauDisplay.forEach(pile => pile.style.cursor = 'default');\n            btnUndo.addEventListener('click', undoLastMove);\n            btnUndo.classList.remove('inactive');\n            lastMove = 'move card';\n            lastMovedCard = selectedCardDisplay;\n            selectedCardDisplay.classList.remove('card-active');\n            selectedCardDisplay = null;\n            undoOriginPileDisplay = originPileDisplay;\n            undoOriginArray = originArray;\n            undoCardIndex = cardIndex;\n            gameIsWon();\n        } else if (e.target.classList.contains('card') && !e.target.classList.contains('hidden')) {\n            selectedCardDisplay.classList.remove('card-active');\n            selectedCardDisplay = e.target;\n            selectedCardDisplay.classList.add('card-active');\n            originPileDisplay = e.target.parentNode;\n            findSelectedCard();\n        }\n    }\n}\n\n\nfunction findSelectedCard() {\n    const pileIndex = placeholders.findIndex(placeholder => placeholder === originPileDisplay);\n\n    if (pileIndex <= 3) {\n        originArray = foundations[pileIndex];\n        cardIndex = originArray.length - 1;\n    } else if (pileIndex === 4) {\n        originArray = waste;\n        cardIndex = originArray.length - 1;\n    } else if (pileIndex >= 6) {\n        originArray = tableau[pileIndex - 6];\n        cardIndex = Array.from(placeholders[pileIndex].children).findIndex(card => card === selectedCardDisplay);\n    }\n    \n    selectedCard = originArray[cardIndex];\n}\n\n\nfunction findDestinationArray() {\n    const pileIndex = placeholders.findIndex(placeholder => placeholder === destinationPileDisplay);\n\n    if (pileIndex <= 3) destinationArray = foundations[pileIndex];\n    else if (pileIndex === 4) destinationArray = waste;\n    else if (pileIndex >= 6) destinationArray = tableau[pileIndex - 6];\n}\n\n\nfunction isMoveValid() {\n    const originLastCardIndex = originArray.length - 1;\n    const destLastCard = destinationArray[destinationArray.length - 1];\n\n    if (\n        originPileDisplay.classList.contains('tableau-pile') && \n        selectedCardDisplay !== originPileDisplay.children[originLastCardIndex]\n    ) isLastTableauPileCard = false;\n    else isLastTableauPileCard = true;\n\n    if (destinationPileDisplay.classList.contains('tableau-pile')) {\n        if (destinationArray.length === 0 && selectedCard.value === 13) return true;\n        else if (destLastCard && selectedCard.color !== destLastCard.color && selectedCard.value === destLastCard.value - 1) return true;\n        else return false;\n    } else if (destinationPileDisplay.classList.contains('foundations-pile')) {\n        if (!isLastTableauPileCard) return false;\n        else if (destinationArray.length === 0 && selectedCard.value === 1) return true;\n        else if (destLastCard && selectedCard.suit === destLastCard.suit && selectedCard.value === destLastCard.value + 1) return true;\n        else return false;\n    }\n}\n\n\nfunction undoLastMove() {\n    if (lastMove === 'turn stock card') {\n        if (waste.length === 0) {\n            stock.forEach(card => waste.unshift(card));\n            stock = [];\n            let wasteInnerHtml = '';\n            waste.forEach((card, i) => {\n                wasteInnerHtml += `<img src=\"${card.imageSrc}\" class=\"card\" style=\"z-index: ${i + 1};\"/>`\n            })\n            wasteDisplay.innerHTML = wasteInnerHtml;\n            wasteDisplay.addEventListener('click', moveCard);\n            stockDisplay.innerHTML = '↻';\n        } else if (stock.length === 1 && stockHasOneRound) {\n            wasteDisplay.innerHTML = '';\n            stockDisplay.innerHTML = '<img src=\"./images/card-back.png\" class=\"card\"/>';\n        } else if (waste.length > 0) {\n            stock.push(waste.pop());\n            wasteDisplay.removeChild(wasteDisplay.children[wasteDisplay.children.length - 1]);\n            if (stock.length === 1) stockDisplay.innerHTML = '<img src=\"./images/card-back.png\" class=\"card\"/>';\n        }\n    } else if (lastMove === 'move card') {\n        if (undoOriginPileDisplay.classList.contains('foundations-pile') || undoOriginPileDisplay.classList.contains('waste-pile')) {\n            undoOriginArray.push(destinationArray.pop());\n            undoOriginPileDisplay.appendChild(lastMovedCard);\n            lastMovedCard.style.zIndex = undoOriginArray.length;\n            lastMovedCard.style.top = '0px';\n        } else if (undoOriginPileDisplay.classList.contains('tableau-pile')) {\n            const movedCardIndex = destinationArray.length - amountMovedCards;\n            undoOriginArray.push(...destinationArray.splice(movedCardIndex, amountMovedCards));\n            for (let i = 0; i < amountMovedCards; i++) {\n                undoOriginPileDisplay.appendChild(destinationPileDisplay.children[movedCardIndex]);\n            }\n            if (prevCardHidden) {\n                undoOriginPileDisplay.children[undoCardIndex - 1].classList.add('hidden');\n                undoOriginPileDisplay.children[undoCardIndex - 1].setAttribute('src', './images/card-back.png');\n            }\n            alignTableauCards(undoOriginPileDisplay);\n        }\n    }\n    updateScore('undo move');\n    if (moves > 0) {\n        btnUndo.removeEventListener('click', undoLastMove);\n        btnUndo.classList.add('inactive');\n    }\n    foundationsDisplay.forEach(pile => pile.style.cursor = 'default');\n    tableauDisplay.forEach(pile => pile.style.cursor = 'default');\n}\n\n\nfunction gameIsWon() {\n    if (foundations.every(pile => pile.length === 13)) {\n        showWinningMessage();\n        clearInterval(clock);\n    } else if (hiddenCards.length === 0 && stock.length === 0 && waste.length === 0) automateMoves();\n}\n\n\nfunction automateMoves() {\n    let lastTableauIndex = -1;\n    let intervalId = setInterval(() => {\n        for (let i = 0 ; i < tableau.length; i++) {\n            stopLoop = false;\n            if (i == lastTableauIndex + 1 || (i == 0 && lastTableauIndex == tableau.length - 1) || lastTableauIndex == -1) {\n                for (let j = 0; j < foundations.length; j++) {\n                    const lastTCardIndex = tableau[i].length - 1;\n                    const lastFCardIndex = foundations[j].length - 1;\n    \n                    if (tableau[i].length > 0 && tableau[i][lastTCardIndex].value === 1 && foundations[j].length === 0) {\n                        const cardToMove = tableauDisplay[i].children[lastTCardIndex];\n                        foundationsDisplay[j].appendChild(cardToMove);\n                        cardToMove.style.top = '0px';\n                        cardToMove.style.zIndex = foundationsDisplay[j].children.length;\n                        foundations[j].push(tableau[i].pop());\n                        stopLoop = true;\n                        score += 10;\n                        moves++;\n                        scoreDisplay.textContent = score;\n                        movesDisplay.textContent = moves;\n                        break;\n                    } else if (\n                        tableau[i].length > 0 && foundations[j].length > 0 &&\n                        (tableau[i][lastTCardIndex].suit === foundations[j][lastFCardIndex].suit &&\n                        tableau[i][lastTCardIndex].value === foundations[j][lastFCardIndex].value + 1)\n                    ) {\n                        const cardToMove = tableauDisplay[i].children[lastTCardIndex];\n                        foundationsDisplay[j].appendChild(cardToMove);\n                        cardToMove.style.top = '0px';\n                        cardToMove.style.zIndex = foundationsDisplay[j].children.length;\n                        foundations[j].push(tableau[i].pop());\n                        stopLoop = true;\n                        score += 10;\n                        moves++;\n                        scoreDisplay.textContent = score;\n                        movesDisplay.textContent = moves;\n                        break;\n                    } \n                }\n                lastTableauIndex = i;\n            }\n            if (stopLoop) break;\n        }\n        if (foundations.every(pile => pile.length === 13)) {\n            clearInterval(intervalId);\n            clearInterval(clock);\n            showWinningMessage();\n        }\n    }, 100);\n}\n\n\nfunction updateScore(action) {\n    if (action === 'make move') {\n        if (prevCardHidden) score += 5;\n        if (originPileDisplay.classList.contains('waste-pile') && destinationPileDisplay.classList.contains('tableau-pile')) score += 5;\n        if (originPileDisplay.classList.contains('foundations-pile') && destinationPileDisplay.classList.contains('tableau-pile')) score -= 15;\n        if (\n            (originPileDisplay.classList.contains('waste-pile') || originPileDisplay.classList.contains('tableau-pile')) &&\n            destinationPileDisplay.classList.contains('foundations-pile')\n        ) score += 10;\n    } else if (action === 'undo move' && lastMove === 'move card') {\n        if (prevCardHidden) score -= 5;\n        if (originPileDisplay.classList.contains('waste-pile') && destinationPileDisplay.classList.contains('tableau-pile')) score -= 5;\n        if (originPileDisplay.classList.contains('foundations-pile') && destinationPileDisplay.classList.contains('tableau-pile')) score += 15;\n        if (\n            (originPileDisplay.classList.contains('waste-pile') || originPileDisplay.classList.contains('tableau-pile')) &&\n            destinationPileDisplay.classList.contains('foundations-pile')\n        ) score -= 10;\n    }\n\n    scoreDisplay.textContent = score;\n}\n\n\nfunction pauseStartGame() {\n    if (btnPauseStart.classList.contains('pause') && moves > 0) {\n        clearInterval(clock);\n        btnPauseStart.classList.remove('pause');\n        btnPauseStart.classList.add('play');\n        btnPauseStart.setAttribute('src', './images/play-btn.svg');\n        foundationsDisplay.forEach(pile => pile.removeEventListener('click', moveCard));\n        tableauDisplay.forEach(pile => pile.removeEventListener('click', moveCard));\n        wasteDisplay.removeEventListener('click', moveCard);\n        stockDisplay.removeEventListener('click', turnStockCard);\n    } else if (btnPauseStart.classList.contains('play')) {\n        clock = setInterval(() => {\n            seconds++;\n            if (seconds === 60) {\n                minutes ++;\n                seconds = 0;\n            }\n            minutesDisplay.textContent = minutes >= 10 ? minutes : `0${minutes}`;\n            secondsDisplay.textContent = seconds >= 10 ? seconds : `0${seconds}`;\n        }, 1000);\n        btnPauseStart.classList.remove('play');\n        btnPauseStart.classList.add('pause');\n        btnPauseStart.setAttribute('src', './images/pause-btn.svg');\n        foundationsDisplay.forEach(pile => pile.addEventListener('click', moveCard));\n        tableauDisplay.forEach(pile => pile.addEventListener('click', moveCard));\n        waste.length > 0 && wasteDisplay.addEventListener('click', moveCard);\n        stockDisplay.addEventListener('click', turnStockCard);\n    }\n}\n\n\nfunction startClock() {\n    clock = setInterval(() => {\n        seconds++;\n        if (seconds === 60) {\n            minutes ++;\n            seconds = 0;\n        }\n        minutesDisplay.textContent = minutes >= 10 ? minutes : `0${minutes}`;\n        secondsDisplay.textContent = seconds >= 10 ? seconds : `0${seconds}`;\n    }, 1000);\n}\n\n\nfunction showWinningMessage() {\n    gameArea.style.marginBottom = '42px';\n    winningMessage.style.display = 'block';\n    winningMessage.innerHTML = `\n        <h3 class=\"congrats\"> Congratulations, you won! </h3>\n        <div class=\"stats\"> \n            <span>${minutesDisplay.textContent}:${secondsDisplay.textContent}</span>\n            <span>|</span>\n            <span>${score} points</span>\n            <span>|</span>\n            <span>${moves} moves</span>\n        </div>\n        <button class=\"btn btn-popup\" id=\"btn-play-again\">Play Again</button>\n    `;\n    document.getElementById('btn-play-again').addEventListener('click', startGame);\n}"],"names":["gameArea","document","querySelector","foundationsDisplay","Array","from","getElementsByClassName","wasteDisplay","stockDisplay","tableauDisplay","placeholders","hiddenCards","btnUndo","getElementById","btnPauseStart","btnRestart","btnNewGame","minutesDisplay","secondsDisplay","scoreDisplay","movesDisplay","winningMessage","foundations","waste","stock","tableau","score","moves","seconds","minutes","clock","thisGameDeck","stopLoop","stockHasOneRound","selectedCard","selectedCardDisplay","cardIndex","undoCardIndex","originArray","undoOriginArray","destinationArray","originPileDisplay","undoOriginPileDisplay","destinationPileDisplay","amountMovedCards","lastMove","lastMovedCard","prevCardHidden","deck","isLastTableauPileCard","longestPileLength","reset","textContent","forEach","pile","style","cursor","marginBottom","display","classList","add","startGame","clearInterval","createCards","shuffleCards","distributeCards","displayCards","restartGame","suit","i","push","value","color","imageSrc","_","randomNum","Math","floor","random","length","temp","map","card","splice","position","tableauPileHtml","j","innerHTML","alignTableauCards","addEventListener","moveCard","turnStockCard","tableauPile","tableauPileCards","children","zIndex","top","contains","updateCardsDisplay","appendChild","remove","setAttribute","updateArrays","movedCard","pop","movedCards","undoLastMove","startClock","turnedCard","cardImg","createElement","unshift","removeEventListener","e","target","parentNode","findDestinationArray","isMoveValid","updateScore","gameIsWon","findSelectedCard","pileIndex","findIndex","placeholder","originLastCardIndex","destLastCard","wasteInnerHtml","removeChild","movedCardIndex","every","showWinningMessage","automateMoves","lastTableauIndex","intervalId","setInterval","lastTCardIndex","lastFCardIndex","cardToMove","action","pauseStartGame"],"version":3,"file":"index.a7f9cfcb.js.map"}